### [Basic File Copy](https://github.com/Umersaeed81/File_Management_Operations/blob/main/Simple_File_Copy/Example-01.md)<br>

This example demonstrates how to copy a single file from a source location to a destination folder using the **shutil.copy()** function. This operation creates an exact copy of the file in the specified destination.

### [File Copy with Existence Check](https://github.com/Umersaeed81/File_Management_Operations/blob/main/Simple_File_Copy/Example-02.md)

This example enhances the basic file copy by first checking if the source file exists before attempting to copy it. If the file is found, it is copied to the destination folder, and a success message is printed. If not, an error message is displayed.


### [File Copy with Destination Folder Check](https://github.com/Umersaeed81/File_Management_Operations/blob/main/Simple_File_Copy/Example-03.md)

This example further improves the file copy operation by checking if the destination folder exists. If the destination folder is not found, an error message is displayed, preventing the copy operation from proceeding.

### [Comprehensive Error Handling](https://github.com/Umersaeed81/File_Management_Operations/blob/main/Simple_File_Copy/Example-04.md)

This version combines checks for both the existence of the source file and the destination folder before performing the copy operation, providing more comprehensive error handling compared to previous examples.


### [Creating Destination Folder](https://github.com/Umersaeed81/File_Management_Operations/blob/main/Simple_File_Copy/Example-05.md)

This code creates the destination folder if it does not already exist and checks if the source file exists. If the source file is found, it copies the file; otherwise, it displays an error message.

### [Avoiding Overwrites by Renaming](https://github.com/Umersaeed81/File_Management_Operations/blob/main/Simple_File_Copy/Example-06.md)

This example ensures that the copied file does not overwrite an existing file in the destination folder by appending an incremental suffix to the filename if a file with the same name already exists. This guarantees that all copies are retained uniquely.

### [Selective Files Copy](https://github.com/Umersaeed81/File_Management_Operations/blob/main/Simple_File_Copy/Example-07.md)

This example demonstrates how to selectively copy multiple files from a list of source files to a destination folder. The code checks if each file exists and copies it if it does. If the destination folder does not exist, it is created.

### [Selective Files Copy Avoiding Overwrites by Renaming](https://github.com/Umersaeed81/File_Management_Operations/blob/main/Simple_File_Copy/Example-08.md)

This example extends the selective files copy by adding functionality to avoid overwriting existing files in the destination folder. If a file with the same name already exists, the code generates a new filename with an incremental suffix to ensure that each file is copied without overwriting any existing files.

## Copying Multiple Files

Copying multiple files from one directory to another is a common requirement in many applications. This operation involves iterating over a set of files and duplicating each one at the target location. In this section, we will explore several examples that demonstrate different scenarios and techniques for copying multiple files. Each example builds upon the previous one, introducing new checks and safeguards to handle common issues that can arise during these operations. These examples highlight the importance of filtering out subfolders, handling potential overwrites, and ensuring robust and error-free copy operations.

### [Copying All Files from a Directory](https://github.com/Umersaeed81/File_Management_Operations/blob/main/Copying_Multiple_Files/Example-09.md)
This example demonstrates how to copy all files from a source directory to a destination directory. It iterates over each file in the source directory and duplicates it in the destination directory.

### [Copying All Files and Renaming to Avoid Overwrites](https://github.com/Umersaeed81/File_Management_Operations/blob/main/Copying_Multiple_Files/Example-10.md)
This example improves upon the previous one by adding functionality to avoid overwriting existing files in the destination folder. It generates new filenames with an incremental suffix if a file with the same name already exists.

### [Copying Only Files from a Directory](https://github.com/Umersaeed81/File_Management_Operations/blob/main/Copying_Multiple_Files/Example-11.md)

This example refines the copying process by filtering out subfolders and only copying files from the source directory to the destination directory. This ensures that only the intended files are copied without including any subfolder structures

### [Copying Only Files and Renaming to Avoid Overwrites](https://github.com/Umersaeed81/File_Management_Operations/blob/main/Copying_Multiple_Files/Example-12.md)

This example combines the functionality of filtering out subfolders and avoiding overwrites by renaming files. It ensures that only files are copied, and if a file with the same name already exists in the destination folder, it generates a new filename to prevent overwriting.

## Conditional Copying

Conditional copying involves applying specific criteria to determine which files should be copied. This approach allows for more refined and controlled file copying operations based on file types, names, or other attributes. In this section, we explore examples where files are selectively copied based on their extensions and other conditions, ensuring that only the relevant files are transferred while handling potential overwrites and preserving metadata.

### Copying Files Based on File Extensions

In this subsection, we focus on copying files based on their file extensions. This method is useful when you only need to copy files with specific extensions from a directory, thereby avoiding unnecessary data transfer and saving time.

### [Copying Only Excel Files](https://github.com/Umersaeed81/File_Management_Operations/blob/main/Copying_Files_Based_on_File_Extensions/Example-13.md)

This example demonstrates how to copy only .xlsx files from a source directory to a destination directory. It filters files based on their extensions and copies only the matching files.

### [Copying Excel Files and Handling Overwrites](https://github.com/Umersaeed81/File_Management_Operations/blob/main/Copying_Files_Based_on_File_Extensions/Example-14.md)

Building upon the previous example, this script adds functionality to avoid overwriting existing files in the destination folder. It generates new filenames with an incremental suffix if a file with the same name already exists.

### [Copying Excel and Text Files](https://github.com/Umersaeed81/File_Management_Operations/blob/main/Copying_Files_Based_on_File_Extensions/Example-15.md)

This example extends the filtering criteria to include both .xlsx and .txt files. It demonstrates how to copy multiple specific file types from a source directory to a destination directory.

### [Copying Excel and Text Files with Renaming to Avoid Overwrites](https://github.com/Umersaeed81/File_Management_Operations/blob/main/Copying_Files_Based_on_File_Extensions/Example-16.md)

This example combines the functionality of copying specific file types and renaming files to avoid overwrites. It filters files by .xlsx and .txt extensions and ensures that if a file with the same name already exists in the destination folder, a new filename is generated to prevent overwriting.

### Copying Files Based on Name Patterns

In this section, we delve into more advanced file copying scenarios where the selection of files is based on specific conditions such as name patterns. This approach allows for greater flexibility and precision in managing file copying tasks. The following examples showcase how to copy files that meet specific naming criteria, with added checks to handle potential issues such as overwriting existing files and handling subfolders.

### [Copying Files That Start with Specific Characters](https://github.com/Umersaeed81/File_Management_Operations/blob/main/Copying_Files_Based_on_Name_Patterns/Example-17.md)

This example demonstrates how to copy files from a source directory to a destination directory based on whether their names start with the characters "Al". The script iterates over the files in the source directory and copies those that match the condition to the destination folder.

### [Copying Files That Start with Specific Characters and Handling Overwrites](https://github.com/Umersaeed81/File_Management_Operations/blob/main/Copying_Files_Based_on_Name_Patterns/Example-18.md)

This example builds on the previous one by adding functionality to handle potential overwrites. If a file with the same name already exists in the destination folder, the script generates a new filename with an incremental suffix to avoid overwriting the existing file.

### [Copying Files (Excluding Subfolders) That Start with Specific Characters](https://github.com/Umersaeed81/File_Management_Operations/blob/main/Copying_Files_Based_on_Name_Patterns/Example-19.md)

In this example, the script is enhanced to exclude subfolders from the copy operation. It only processes and copies files that start with the specified characters, ensuring that no subfolders are mistakenly copied.


### [Copying Files (Excluding Subfolders) That Start with Specific Characters and Handling Overwrites](https://github.com/Umersaeed81/File_Management_Operations/blob/main/Copying_Files_Based_on_Name_Patterns/Example-20.md)

This example combines the enhancements from previous examples. It excludes subfolders from the copy operation and handles potential overwrites by generating new filenames with incremental suffixes if a file with the same name already exists in the destination folder.

### [Copying Files That End with Specific Characters](https://github.com/Umersaeed81/File_Management_Operations/blob/main/Copying_Files_Based_on_Name_Patterns/Example-21.md)

This example demonstrates how to copy files from a source directory to a destination directory based on whether their base names (excluding extensions) end with the characters "_gl". The script iterates over the files in the source directory and copies those that match the condition to the destination folder.

### [Copying Files That End with Specific Characters and Handling Overwrites](https://github.com/Umersaeed81/File_Management_Operations/blob/main/Copying_Files_Based_on_Name_Patterns/Example-22.md)

This example builds on the previous one by adding functionality to handle potential overwrites. If a file with the same name already exists in the destination folder, the script generates a new filename with an incremental suffix to avoid overwriting the existing file.

### [Copying Files (Excluding Subfolders) That End with Specific Characters](https://github.com/Umersaeed81/File_Management_Operations/blob/main/Copying_Files_Based_on_Name_Patterns/Example-23.md)

In this example, the script is enhanced to exclude subfolders from the copy operation. It only processes and copies files that end with the specified characters.

### [Copying Files (Excluding Subfolders) That End with Specific Characters](https://github.com/Umersaeed81/File_Management_Operations/blob/main/Copying_Files_Based_on_Name_Patterns/Example-24.md)

In this example, the script is enhanced to exclude subfolders from the copy operation. It only processes and copies files that end with the specified characters.
